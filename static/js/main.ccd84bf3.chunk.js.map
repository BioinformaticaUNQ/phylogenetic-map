{"version":3,"sources":["components/Header.js","service/geoLocationService.js","components/TargetSVG.js","components/Map.js","components/PhylogeneticTree.js","components/TreeModal.js","components/Main.js","components/Input.js","components/Form.js","components/Footer.js","App.js","reducer/Store.js","serviceWorker.js","index.js","icons/icon.svg","icons/tree.svg","icons/downloadMap.svg","icons/github.svg"],"names":["Header","showInfo","restart","useStoreState","state","files","treefile","locations","className","onClick","src","icon","alt","name","Promise","all","map","l","axios","get","then","result","data","results","geometry","latitude","lat","longitude","lng","targetSVG","getRandomColor","color","i","Math","floor","random","Map","filetreeName","locationContent","handleToogleModal","useState","allLocations","setAllLocations","useEffect","geoLocationService","reduce","res","location","indexLocation","findIndex","displaySeq","seq","amountOfSeq","r","TargetSVG","fill","scale","window","am4core","am4maps","am4geodata_worldLow","useTheme","target","MapPolygon","chart","create","MapChart","geodata","projection","projections","Mercator","zoomControl","ZoomControl","homeGeoPoint","polygonSeries","series","push","MapPolygonSeries","exclude","useGeodata","mapPolygons","template","nonScalingStroke","imageSeries","MapImageSeries","imageTemplate","mapImages","tooltipText","nonScaling","marker","createChild","Sprite","path","horizontalCenter","verticalCenter","propertyFields","legend","Legend","paddingLeft","paddingRight","marginBottom","width","percent","valign","contentAlign","labels","legends","elem","sort","a","b","itemContainers","interactionsEnabled","id","tree","save","document","querySelector","innerHTML","split","downloadMap","PhylogeneticTree","newick","newickJs","parse_newick","treeRef","useRef","formatNodes","graph","children","forEach","node","index","splitName","match","gi","gb","displayName","branch_length","key","current","svg","svgPanZoom","dblClickZoomEnabled","ref","height","labelProp","keyProp","filetreeContent","closeModal","Main","showModal","setShowModal","JSON","parse","content","Input","value","label","placeholder","htmlFor","accept","onChange","inputRef","click","type","Form","generateMap","useStoreActions","actions","addTreefile","addLocations","handleFileSelected","update","event","length","file","fileReader","FileReader","onload","e","readAsText","handleTreefile","handleLocationFile","href","github","showError","fileName","NotificationManager","error","rel","App","cleanFiles","showMap","setShowMap","goBack","treefileContent","isEmpty","Array","some","c","difference","Object","keys","store","createStore","action","payload","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.ccd84bf3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport icon from \"../icons/icon.svg\";\r\n\r\nimport \"./Header.css\";\r\nimport { useStoreState } from \"easy-peasy\";\r\n\r\n const Header = ({ showInfo, restart }) => {\r\n  const { treefile, locations } = useStoreState((state) => state.files);\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"iconContainer\" onClick={showInfo && restart}>\r\n        <img src={icon} alt=\"icon\" className=\"icon\" />\r\n        <p className=\"text\">Phylogenetic Map!</p>\r\n      </div>\r\n      {showInfo && (\r\n        <div className=\"files\">\r\n          <p className=\"text\">Treefile: {treefile.name}</p>\r\n          <p className=\"text\">Location: {locations.name}</p>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import axios from \"axios\";\r\n\r\nconst apiKey = \"b4ec1cf9ef564381871d4386e2133a63\";\r\n\r\nexport default {\r\n  findAll: (locations) => {\r\n    return Promise.all(\r\n      locations.map((l) =>\r\n        axios\r\n          .get(\r\n            `https://api.opencagedata.com/geocode/v1/json?key=${apiKey}&q=${l.name}`\r\n          )\r\n          .then((result) => result.data)\r\n          .then((result) => {\r\n            const {\r\n              lat: latitude,\r\n              lng: longitude,\r\n            } = result.results[0].geometry;\r\n            return { ...l, latitude, longitude };\r\n          })\r\n      )\r\n    );\r\n  },\r\n};\r\n","const targetSVG =\r\n  \"M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z\";\r\n\r\nexport default targetSVG;","import React from \"react\";\r\nimport { save } from \"save-file\";\r\n\r\nimport geoLocationService from \"../service/geoLocationService\";\r\nimport { useState, useEffect } from \"react\";\r\nimport TargetSVG from \"./TargetSVG\";\r\nimport tree from '../icons/tree.svg';\r\nimport downloadMap from '../icons/downloadMap.svg';\r\nimport \"./Map.css\";\r\n\r\nconst getRandomColor = () => {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nconst filteredLocations = (locations) => {\r\n  return (locations || []).reduce((res, location) => {\r\n    const indexLocation = res.findIndex((l) => l.name === location.name);\r\n    if (indexLocation !== -1) {\r\n      res[\r\n        indexLocation\r\n      ].displaySeq = `${res[indexLocation].displaySeq}\\n${location.seq}`;\r\n      res[indexLocation].amountOfSeq += 1;\r\n      return res;\r\n    } else {\r\n      return [...res, { name: location.name, displaySeq: location.seq, amountOfSeq: 1 }];\r\n    }\r\n  }, []);\r\n};\r\n\r\nconst Map = ({ filetreeName, locationContent, handleToogleModal }) => {\r\n  const [allLocations, setAllLocations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    geoLocationService\r\n      .findAll(filteredLocations(locationContent))\r\n      .then((result) =>\r\n        result.map((r) => ({\r\n          ...r,\r\n          targetSVG: TargetSVG,\r\n          fill: getRandomColor(),\r\n          scale: 0.5 * r.amountOfSeq,\r\n        }))\r\n      )\r\n      .then(setAllLocations);\r\n  }, [locationContent]);\r\n\r\n  useEffect(() => {\r\n    const { am4core, am4maps, am4geodata_worldLow } = window;\r\n    function am4themes_myTheme(target) {\r\n      if (target instanceof am4maps.MapPolygon) {\r\n        target.fill = am4core.color(\"#7fb5b0\");\r\n      }\r\n    }\r\n    am4core.useTheme(am4themes_myTheme);\r\n    const chart = am4core.create(\"chartdiv\", am4maps.MapChart);\r\n    chart.geodata = am4geodata_worldLow;\r\n\r\n    chart.projection = new am4maps.projections.Mercator();\r\n    chart.zoomControl = new am4maps.ZoomControl();\r\n\r\n    chart.homeGeoPoint = { latitude: 51, longitude: -23 };\r\n\r\n    const polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n    polygonSeries.exclude = [\"AQ\"];\r\n    polygonSeries.useGeodata = true;\r\n    polygonSeries.mapPolygons.template.nonScalingStroke = true;\r\n\r\n    const imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n    const imageTemplate = imageSeries.mapImages.template;\r\n    imageTemplate.tooltipText = \"{name}\\n{displaySeq}\";\r\n    imageTemplate.nonScaling = true;\r\n\r\n    const marker = imageTemplate.createChild(am4core.Sprite);\r\n    marker.path = TargetSVG;\r\n    marker.horizontalCenter = \"middle\";\r\n    marker.verticalCenter = \"middle\";\r\n    marker.propertyFields.scale = \"scale\";\r\n    marker.propertyFields.fill = \"fill\";\r\n\r\n    imageTemplate.propertyFields.latitude = \"latitude\";\r\n    imageTemplate.propertyFields.longitude = \"longitude\";\r\n    imageSeries.data = allLocations;\r\n\r\n    chart.legend = new am4maps.Legend();\r\n\r\n    // Legend styles\r\n    chart.legend.paddingLeft = 10;\r\n    chart.legend.paddingRight = 10;\r\n    chart.legend.marginBottom = 15;\r\n    chart.legend.width = am4core.percent(40);\r\n    chart.legend.valign = \"bottom\";\r\n    chart.legend.contentAlign = \"left\";\r\n    chart.legend.labels.template.fill = am4core.color(\"#fff\");\r\n\r\n    const legends = allLocations.map((elem) => ({\r\n      ...elem,\r\n      name: `${elem.name} • ${elem.amountOfSeq}`,\r\n    }));\r\n    legends.sort((a, b) => a.amountOfSeq - b.amountOfSeq);\r\n    chart.legend.data = legends;\r\n\r\n    // Legend items\r\n    chart.legend.itemContainers.template.interactionsEnabled = false;\r\n  }, [allLocations]);\r\n\r\n  const handleDownloadMap = () => {\r\n    save(\r\n      document.querySelector(\"#chartdiv div\").innerHTML.split(\"<div\")[0],\r\n      `${filetreeName}.svg`\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"chartdiv\" className=\"map\" />\r\n      <div className=\"button-tree\" onClick={() => handleToogleModal(true)}>\r\n        <img src={tree} alt=\"phylogeneticTree\" className=\"icon\" />\r\n      </div>\r\n      <div className=\"button-download-map\" onClick={() => handleDownloadMap()}>\r\n        <img src={downloadMap} alt=\"downloadMap\" className=\"icon\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport newickJs from \"biojs-io-newick\";\r\nimport Tree from \"react-tree-graph\";\r\nimport \"react-tree-graph/dist/style.css\";\r\nimport svgPanZoom from \"svg-pan-zoom\";\r\n\r\nimport \"./PhylogeneticTree.css\";\r\n\r\nconst formatNodes = (graph) => {\r\n  graph.children.forEach((node, index) => {\r\n    if (node.name) {\r\n      const splitName = node.name.match(\"gi_(.*)_.*_(.*)_\");\r\n      if (!splitName) {\r\n        node.gi = node.name;\r\n        node.gb = node.name;\r\n      } else {\r\n        node.gi = `Gi: ${splitName[1]}`;\r\n        node.gb = splitName[2];\r\n      }\r\n    }\r\n    node.displayName = node.name ? node.gi : node.branch_length;\r\n    node.key = `${index}-${node.displayName}`;\r\n    if (node.children) formatNodes(node);\r\n  });\r\n};\r\n\r\nfunction PhylogeneticTree({ newick }) {\r\n  const data = newickJs.parse_newick(newick);\r\n  const treeRef = useRef(null);\r\n\r\n  formatNodes(data);\r\n\r\n  useEffect(() => {\r\n    if (treeRef.current) {\r\n      const svg = document.querySelector(\"#phylogeneticTreeContainer svg\");\r\n      svgPanZoom(svg, { dblClickZoomEnabled: false });\r\n    }\r\n  }, [treeRef]);\r\n\r\n  return (\r\n    <div className=\"phylogeneticTreeContainer\" id=\"phylogeneticTreeContainer\">\r\n      <Tree\r\n        ref={treeRef}\r\n        data={data}\r\n        height={2000}\r\n        width={2000}\r\n        labelProp=\"displayName\"\r\n        keyProp=\"key\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhylogeneticTree;\r\n","import React from \"react\";\r\nimport \"./TreeModal.css\";\r\nimport PhylogeneticTree from \"./PhylogeneticTree\";\r\n\r\nexport default ({ filetreeContent, closeModal }) => {\r\n  return (\r\n    <>\r\n      <div className=\"modalBackground\" onClick={closeModal} />\r\n      <div className=\"modalContent\">\r\n        <PhylogeneticTree newick={filetreeContent} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useStoreState } from \"easy-peasy\";\r\nimport Map from \"./Map\";\r\nimport TreeModal from \"./TreeModal\";\r\n\r\nimport \"./Main.css\";\r\n\r\nconst Main = () => {\r\n  const { treefile, locations } = useStoreState((state) => state.files);\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <Map\r\n        filetreeName={treefile.name}\r\n        locationContent={JSON.parse(locations.content)}\r\n        handleToogleModal={(b) => setShowModal(b)}\r\n      />\r\n      {showModal && (\r\n        <TreeModal\r\n          filetreeContent={treefile.content}\r\n          closeModal={() => setShowModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useRef } from \"react\";\r\n\r\nconst Input = ({ value, label, placeholder = \"Select file\", htmlFor, accept, onChange }) => {\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  return (\r\n    <div className={`formRow ${value && \"selectedFile\"}`}>\r\n      <label htmlFor={htmlFor} className=\"label\">\r\n        {label}: {value || placeholder}\r\n      </label>\r\n      <span\r\n        htmlFor={htmlFor}\r\n        className=\"btn btnUpload\"\r\n        onClick={() => inputRef.current && inputRef.current.click()}\r\n      >\r\n        Upload\r\n      </span>\r\n      <input\r\n        id={htmlFor}\r\n        type=\"file\"\r\n        ref={inputRef}\r\n        className=\"inputFile\"\r\n        accept={accept}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport \"./Form.css\";\r\nimport Input from \"./Input\";\r\nimport { useStoreState, useStoreActions } from \"easy-peasy\";\r\n\r\nconst Form = ({ generateMap }) => {\r\n  const { treefile, locations } = useStoreState(state => state.files);\r\n  const { addTreefile, addLocations } = useStoreActions(actions => actions.files)\r\n\r\n\r\n  const handleFileSelected = update => event => {\r\n    if (event.target.files.length) {\r\n      const file = event.target.files[0];\r\n      const fileReader = new FileReader();\r\n      fileReader.onload = (e) => update({ name: file.name, content: e.target.result});\r\n      fileReader.readAsText(file);\r\n    }\r\n  };\r\n\r\n  const handleTreefile = handleFileSelected(addTreefile);\r\n  const handleLocationFile = handleFileSelected(addLocations);\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <Input\r\n        value={treefile.name}\r\n        htmlFor=\"treefile\"\r\n        label=\"Treefile\"\r\n        onChange={handleTreefile}\r\n        accept=\".treefile\"\r\n      />\r\n      <Input\r\n        value={locations.name}\r\n        htmlFor=\"location\"\r\n        label=\"Location\"\r\n        onChange={handleLocationFile}\r\n        accept=\".json\"\r\n      />\r\n      <span className={`btn btnPrimary ${(!treefile.name || !locations.name) && \"btn-disabled\"}`} onClick={generateMap}>\r\n        Generate Map\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport github from '../icons/github.svg';\r\nimport \"./Footer.css\";\r\n\r\nexport default () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <a href=\"https://github.com/hurrell-y-mottesi/phylogenetic-map\" className=\"link\">\r\n        <img src={github} alt=\"github\" className=\"icon\" />\r\n      </a>\r\n      Hurrell Tomas and Mottesi Juan\r\n    </footer>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\r\nimport newickJs from \"biojs-io-newick\";\r\nimport \"react-notifications/lib/notifications.css\";\r\nimport {\r\n  NotificationContainer,\r\n  NotificationManager,\r\n} from \"react-notifications\";\r\nimport difference from \"lodash/difference\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport Header from \"./components/Header\";\r\nimport Main from \"./components/Main\";\r\nimport Form from \"./components/Form\";\r\nimport Footer from \"./components/Footer\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst showError = (fileName) =>\r\n  NotificationManager.error(\r\n    [\r\n      `${fileName} format is incorrect`,\r\n      <a\r\n        className=\"link\"\r\n        href=\"https://github.com/hurrell-y-mottesi/phylogenetic-map\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Show Doc\r\n      </a>,\r\n    ],\r\n    \"\",\r\n    500000\r\n  );\r\n\r\nfunction App() {\r\n  const { treefile, locations } = useStoreState((state) => state.files);\r\n  const cleanFiles = useStoreActions((actions) => actions.files.cleanFiles);\r\n  const [showMap, setShowMap] = useState(false);\r\n\r\n  const restart = () => {\r\n    cleanFiles();\r\n    setShowMap(false);\r\n  };\r\n\r\n  const containsInvalidKeys = (content) => {\r\n    return content.some((c) => difference(Object.keys(c), [\"seq\", \"name\"]).length !== 0);\r\n  };\r\n\r\n  const checkContents = () => {\r\n    const treefileContent = newickJs.parse_newick(treefile.content);\r\n    if (isEmpty(treefileContent)) {\r\n      showError(treefile.name);\r\n      return;\r\n    }    \r\n    try {\r\n      const locationContent = JSON.parse(locations.content);\r\n      if (!(locationContent instanceof Array) || containsInvalidKeys(locationContent)) {\r\n        showError(locations.name);\r\n      } else {\r\n        setShowMap(true);\r\n      }\r\n    } catch (e) {\r\n      showError(locations.name);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section className=\"container\">\r\n        <Header showInfo={showMap} restart={restart} />\r\n        {showMap ? (\r\n          <Main goBack={() => setShowMap(false)} />\r\n        ) : (\r\n          <Form generateMap={checkContents} />\r\n        )}\r\n        <Footer />\r\n      </section>\r\n      <NotificationContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, action } from \"easy-peasy\";\r\n\r\nconst store = createStore({\r\n  files: {\r\n    treefile: {\r\n      name: \"\",\r\n      content: \"\",\r\n    },\r\n    locations: {\r\n      name: \"\",\r\n      content: \"\",\r\n    },\r\n    addTreefile: action((state, payload) => {\r\n      state.treefile = { ...payload };\r\n    }),\r\n    addLocations: action((state, { name, content }) => {\r\n      state.locations = { name, content };\r\n    }),\r\n    cleanFiles: action((state) => {\r\n      state.treefile = { name: \"\", content: \"\" };\r\n      state.locations = { name: \"\", content: \"\" };\r\n    }),\r\n  },\r\n});\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { StoreProvider } from 'easy-peasy';\r\n\r\nimport App from './App';\r\nimport store from './reducer/Store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreProvider store={store}>\r\n      <App />\r\n    </StoreProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/icon.67a5203a.svg\";","module.exports = __webpack_public_path__ + \"static/media/tree.db21f93f.svg\";","module.exports = __webpack_public_path__ + \"static/media/downloadMap.abd052bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.76d344f0.svg\";"],"sourceRoot":""}